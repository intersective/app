################################################
#  GITHUB ACTION WORKFLOW NAME
################################################
name: Release to beta/staging/test environment


################################################
#  GITHUB ACTION EVENT TRIGGER
################################################
on:
  workflow_dispatch:
  push:
    branches: [ 'feature/new-stack' ]
    

################################################
#  GITHUB ACTION JOBS
################################################
jobs:
  release-stage:
    name: release-stage
    runs-on: ubuntu-latest


################################################
#  GITHUB ACTIONS GLOBAL ENV VARIABLES  
################################################
    env:
      REGION : ap-southeast-2
      ENV : stage # Valid values are sandbox,stage,live only
      STACK_NAME: beta # Valid values are au,us,uk,p2,lf,nu,alpha,beta,shared only
      ROOTSTACK: app-v2
      CFNS3BucketName: devops-cfn-templates
      PRIVATES3BucketName: devops-shared-private
      PUBLICZONENAME: beta.practera.com
      BUILD_CONFIG: custom



################################################
#  GITHUB REPO CHECKOUT 
################################################
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis



################################################
#  NODE ENV
################################################    
      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      

################################################
#  NODE MODULES CACHE  
################################################
      - name: Cache node modules
        uses: actions/cache@v2
        id: cache-node-modules
        env:
          cache-name: cache
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-


################################################
#  NODE MODULES INSTALL  
################################################
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run:  npm install
      

################################################
#  AWS CLI CONFIGURATION - DEVOPS 
################################################ 
      - name: Configure AWS credentials from $STACK_NAME account in $REGION region
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEVOPS_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEVOPS_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2


###############################################################
#  SERVERLESS DEPLOYMENT VARIABLES FROM SHARED ACCOUNT
##############################################################
      - name: Serverless deployment
        run: |
          cat >> .env <<EOF
          FILESTACKAWSID=$(aws secretsmanager get-secret-value --secret-id $STACK_NAME-DEPLOY-$ENV| jq --raw-output '.SecretString' | jq -r .FILESTACKID) 
          P1STACKAWSID=$(aws secretsmanager get-secret-value --secret-id $STACK_NAME-DEPLOY-$ENV| jq --raw-output '.SecretString' | jq -r .P1PRODID) 
         
          EOF
        env:  #TODO: Update once manually to new stack accordingly
          STACK_NAME: shared # Valid values are au,us,uk,p2,lf,nu,alpha,beta,shared only
          ENV: live # Valid values are sandbox,stage,live only


##########################################################
#  AWS DEPLOY SECRET - MASK CONSOLE DISPLAY
##########################################################
      - name: AWS Deploy Secret
        id: DeploySecret
        run: |
          echo "Enable SLACK NOTIFY"
          SLACK_WEBHOOK_URL=$(aws secretsmanager get-secret-value --secret-id $STACK_NAME-DEPLOY-$ENV| jq --raw-output '.SecretString' | jq -r .SLACK_WEBHOOK_URL)
          echo "::add-mask::$SLACK_WEBHOOK_URL"
          echo "::set-output name=SLACK_WEBHOOK_URL::$SLACK_WEBHOOK_URL"
    
          echo "Enable BETA ACCOUNT CLI Login"
          BETA_AWS_ACCESS_KEY_ID=$(aws secretsmanager get-secret-value --secret-id $STACK_NAME-DEPLOY-$ENV| jq --raw-output '.SecretString' | jq -r .BETA_AWS_ACCESS_KEY_ID)
          BETA_AWS_SECRET_ACCESS_KEY=$(aws secretsmanager get-secret-value --secret-id $STACK_NAME-DEPLOY-$ENV| jq --raw-output '.SecretString' | jq -r .BETA_AWS_SECRET_ACCESS_KEY)
          echo "::add-mask::$BETA_AWS_ACCESS_KEY_ID"
          echo "::add-mask::$BETA_AWS_SECRET_ACCESS_KEY"
          echo "::set-output name=BETA_AWS_ACCESS_KEY_ID::$BETA_AWS_ACCESS_KEY_ID"
          echo "::set-output name=BETA_AWS_SECRET_ACCESS_KEY::$BETA_AWS_SECRET_ACCESS_KEY"

        env:  #TODO: Update once manually to new stack accordingly
          STACK_NAME: shared # Valid values are au,us,uk,p2,lf,nu,alpha,beta,shared only
          ENV: live # Valid values are sandbox,stage,live only

################################################
#  AWS CLI CONFIGURATION  - BETA
################################################ 
      - name: Configure AWS credentials from $STACK_NAME account in $REGION region
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ steps.DeploySecret.outputs.BETA_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ steps.DeploySecret.outputs.BETA_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.DeploySecret.outputs.BETA_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.DeploySecret.outputs.BETA_AWS_SECRET_ACCESS_KEY }}


###############################################################
#  ANGULAR ENVIRONMENT CREATION
##############################################################
      - name: Angular Environment creation
        run: |
          printf "Creating required secret variables for angular environment variable creation\n\n"

          export CUSTOM_APPKEY=$(aws secretsmanager get-secret-value --secret-id $STACK_NAME-AppKeySecret-$ENV| jq --raw-output '.SecretString' | jq -r .appkey) 
          export CUSTOM_STACK_UUID=NA #TODO create uuid
          printf "Angular environment variable creation  complete\n\n"
          printf "Executing env.sh script\n\n"
          chmod +x env.sh && ./env.sh
          cat src/environments/environment.custom.ts
        env:
          CUSTOM_PATH_IMAGE: /images
          CUSTOM_PATH_VIDEO: /videos
          CUSTOM_GRAPH_QL: https://core-graphql-api.${{ env.PUBLICZONENAME }}
          CUSTOM_API_ENDPOINT: https://admin.${{ env.PUBLICZONENAME }}
          CUSTOM_S3_BUCKET: files.${{ env.PUBLICZONENAME }}
          CUSTOM_ENVIRONMENT: ${{ env.ENV }}
          CUSTOM_CHAT_GRAPH_QL: https://chat-api.${{ env.PUBLICZONENAME }}/graphql
          CUSTOM_GLOBAL_LOGIN_URL: https://login-app.${{ env.PUBLICZONENAME }}
          CUSTOM_COUNTRY: AUS #TODO CHECK
          CUSTOMPLAIN_SKIPGLOBALLOGINFLAG: true
          CUSTOM_PATH_ANY: /any
          CUSTOM_AWS_REGION: ${{ env.REGION }}
          CUSTOM_JS_ENVIRONEMENT: dev #TODO CHECK

