service: ${env:STACK_NAME}-lambda-edge-${env:ROOTSTACK}
frameworkVersion: "2"
useDotenv: true
enableLocalInstallationFallback: true

provider:
  logRetentionInDays: 90 # Set the default RetentionInDays for a CloudWatch LogGroup
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  stage: ${env:ENV}
  deploymentBucket:
    maxPreviousDeploymentArtifacts: 10 # On every deployment the framework prunes the bucket to remove artifacts older than this limit. The default is 5
    blockPublicAccess: true
    serverSideEncryption: AES256
    tags:
      StackName: ${env:STACK_NAME}
      Env: ${env:ENV}
      RootStack: ${env:ROOTSTACK}
  stackTags: # Optional CF stack tags
    StackName: ${env:STACK_NAME}
    Env: ${env:ENV}
    RootStack: ${env:ROOTSTACK}
  tags: # Optional service wide function tags
    StackName: ${env:STACK_NAME}
    Env: ${env:ENV}
    RootStack: ${env:ROOTSTACK}

resources:
  Resources:
    # Lambda@Edge function
    LambdaFunction:
      DependsOn: [LambdaFunctionRole]
      Type: "AWS::Lambda::Function"
      Properties:
        FunctionName: ${env:ROOTSTACK}-reroute-${env:ENV}
        Handler: index.handler
        Runtime: nodejs14.x
        Role: !GetAtt LambdaFunctionRole.Arn
        MemorySize: 1024
        Code:
          ZipFile: |
            'use strict';

            const path = require("path");

            exports.handler = async (evt,context,cb) => {
              const { request } = evt.Records[0].cf;

              console.log(`Original Uri: ${request.uri}`);

              const uriParts = request.uri.split("/");

              const locale = uriParts.length > 1 ? uriParts[1] : "";
              const locales = ["en-US", "ja", "ms"];

              if (locale === "" || locale === "index.html") {
                request.uri = "/en-US/index.html";
                return cb(null, request);
              }

              if (!locales.includes(locale)) return cb(null, request);

              const lastPartUrl = uriParts[uriParts.length - 1];
              const fileExt = path.extname(lastPartUrl);

              if (!fileExt) request.uri = `/${locale}/index.html`;

              console.log(`New Uri: ${request.uri}`);
              return cb(null, request);
            };


    LambdaFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - edgelambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: "/"
        Policies:
          - PolicyName: ${env:ROOTSTACK}-reroute-role-${env:ENV}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "*"

    IndexLambdaVersion:
      DependsOn: [LambdaFunction]
      Type: AWS::Lambda::Version
      Properties:
        Description: CDN Lambda@Edge
        FunctionName: !GetAtt LambdaFunction.Arn

  Outputs:
    LambdaFunctionArn:
      Description: "Lambda Function ARN"
      Value: !GetAtt LambdaFunction.Arn
      Export:
        Name: ${env:STACK_NAME}-LambdaFunctionArn-${env:ENV}

    IndexLambdaVersionArnVersion:
      Description: "Arn Version for Lambda function to associate unto CDN"
      Value: !Ref IndexLambdaVersion
      Export:
        Name: ${env:STACK_NAME}-IndexLambdaVersionArnVersion-${env:ENV}
